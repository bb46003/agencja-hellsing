# GitHub Actions workflow for creating a new FoundryVTT module release.
#
# Useful References:
#   - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#   - https://docs.github.com/en/actions/learn-github-actions/contexts
#   - https://docs.github.com/en/actions/learn-github-actions/environment-variables
#
# Troubleshooting Checklist:
#   - Is the module's manifest file valid JSON?
#     You can test your manifest file using https://jsonlint.com/.
#
#   - Does the module's manifest have all the required keys?
#     See https://foundryvtt.com/article/module-development/#manifest for more
#     information.
#
#   - Are all the proper files and directories being included in the release's
#     module archive ("module.zip")?
#     Check that the correct files are being passed to the `zip` command run
#     in the "Create Module Archive" step below.
#
#   - Is the release tag the proper format?
#     See the comments for the "Extract Version From Tag" step below.
#
#   - Is a GitHub release being published?
#     This workflow will only run when a release is published, not when a
#     release is updated. Furthermore, note that while a GitHub release will
#     (by default) create a repository tag, a repository tag will not create
#     or publish a GitHub release.
#
#   - Has the module's entry on FoundryVTT's module administration site
#     (https://foundryvtt.com/admin) been updated?
#
name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # This step updates keys in module.json for the release
      #
      # version: given the same value as the release tag used to create the release.
      #          Set to "vDev" in the manifest on main so that anyone developing directly in their Foundry
      #          instance will see they have a development install. The string could have any value.
      #
      # url: set to the github repo url. The benefit is portability. A release made on a fork will have the
      #      correct project URL for the fork.
      #
      # manifest: set to the URL of the latest manifest file for the repository.
      #
      # download: set to the download URL of the module.zip file that is built later in this workflow.
      #
      - name: Populate Versioned keys in Manifest
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: "system.json"
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/system.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # This workflow step creates the module.zip for the release.
      #
      # If you ever add or remove a file from the project, and it needs to be part of the release,
      # then this section will need to be updated.
      #
      # Create a "module.zip" archive containing all the module's required files.
      - name: Create Module Archive
        run: |
          # Note that `zip` will only emit warnings when a file or directory
          # doesn't exist, it will not fail.
          zip --recurse-paths ./module.zip \
            hellsing.mjs templates/ styles/ module/ lang/
      # This workflow step creates the release on the GitHub project, using values entered into the GitHub release
      # form that triggered the workflow. It then adds the module.json and module.zip to the release.
      #
      # Create a release for this specific version
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./system.json, ./module.zip"
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
